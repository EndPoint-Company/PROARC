using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using PROARC.src.Control.Database;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PROARC.src.Control.Database.Tests
{
    [TestClass()]
    public class DatabaseOperationsTests
    {
        [TestMethod()]
        public void QuerySqlCommandTest()
        {
            DatabaseOperations.QuerySqlCommand("SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'");
        }

        [TestMethod()]
        public void CreateAllProgramTablesTest()
        {
            DatabaseOperations.CreateAllProgramTables();
        }

        [TestMethod()]
        public void PopulateUsuariosDatabase()
        {
            DatabaseOperations.QuerySqlCommandNoReturn("USE ProArc;\r\n\r\n-- Insert statements\r\nINSERT INTO Usuarios (nome, nivel_permissao, chave_acesso) VALUES\r\n-- Row 1 to 99\r\n('User1', 1, 'A1B2C3D4E5'),\r\n('User2', 2, 'F1G2H3I4J5'),\r\n('User3', 3, 'K1L2M3N4O5'),\r\n('User4', 4, 'P1Q2R3S4T5'),\r\n('User5', 0, 'U1V2W3X4Y5'),\r\n('User6', 1, 'Z1A2B3C4D6'),\r\n('User7', 2, 'E1F2G3H4I6'),\r\n('User8', 3, 'J1K2L3M4N6'),\r\n('User9', 4, 'O1P2Q3R4S6'),\r\n('User10', 0, 'T1U2V3W4X6'),\r\n('User11', 1, 'Y1Z2A3B4C6'),\r\n('User12', 2, 'D1E2F3G4H6'),\r\n('User13', 3, 'I1J2K3L4M6'),\r\n('User14', 4, 'N1O2P3Q4R6'),\r\n('User15', 0, 'S1T2U3V4W6'),\r\n('User16', 1, 'X1Y2Z3A4B6'),\r\n('User17', 2, 'C1D2E3F4G6'),\r\n('User18', 3, 'H1I2J3K4L6'),\r\n('User19', 4, 'M1N2O3P4Q6'),\r\n('User20', 0, 'R1S2T3U4V6'),\r\n('User21', 1, 'W1X2Y3Z4A6'),\r\n('User22', 2, 'B1C2D3E4F6'),\r\n('User23', 3, 'G1H2I3J4K6'),\r\n('User24', 4, 'L1M2N3O4P6'),\r\n('User25', 0, 'Q1R2S3T4U6'),\r\n('User26', 1, 'V1W2X3Y4Z6'),\r\n('User27', 2, 'A1B2C3D4E7'),\r\n('User28', 3, 'F1G2H3I4J7'),\r\n('User29', 4, 'K1L2M3N4O7'),\r\n('User30', 0, 'P1Q2R3S4T7'),\r\n('User31', 1, 'U1V2W3X4Y7'),\r\n('User32', 2, 'Z1A2B3C4D7'),\r\n('User33', 3, 'E1F2G3H4I7'),\r\n('User34', 4, 'J1K2L3M4N7'),\r\n('User35', 0, 'O1P2Q3R4S7'),\r\n('User36', 1, 'T1U2V3W4X7'),\r\n('User37', 2, 'Y1Z2A3B4C7'),\r\n('User38', 3, 'D1E2F3G4H7'),\r\n('User39', 4, 'I1J2K3L4M7'),\r\n('User40', 0, 'N1O2P3Q4R7'),\r\n('User41', 1, 'S1T2U3V4W7'),\r\n('User42', 2, 'X1Y2Z3A4B7'),\r\n('User43', 3, 'C1D2E3F4G7'),\r\n('User44', 4, 'H1I2J3K4L7'),\r\n('User45', 0, 'M1N2O3P4Q7'),\r\n('User46', 1, 'R1S2T3U4V7'),\r\n('User47', 2, 'W1X2Y3Z4A7'),\r\n('User48', 3, 'B1C2D3E4F7'),\r\n('User49', 4, 'G1H2I3J4K7'),\r\n('User50', 0, 'L1M2N3O4P7'),\r\n('User51', 1, 'Q1R2S3T4U7'),\r\n('User52', 2, 'V1W2X3Y4Z7'),\r\n('User53', 3, 'A1B2C3D4E8'),\r\n('User54', 4, 'F1G2H3I4J8'),\r\n('User55', 0, 'K1L2M3N4O8'),\r\n('User56', 1, 'P1Q2R3S4T8'),\r\n('User57', 2, 'U1V2W3X4Y8'),\r\n('User58', 3, 'Z1A2B3C4D8'),\r\n('User59', 4, 'E1F2G3H4I8'),\r\n('User60', 0, 'J1K2L3M4N8'),\r\n('User61', 1, 'O1P2Q3R4S8'),\r\n('User62', 2, 'T1U2V3W4X8'),\r\n('User63', 3, 'Y1Z2A3B4C8'),\r\n('User64', 4, 'D1E2F3G4H8'),\r\n('User65', 0, 'I1J2K3L4M8'),\r\n('User66', 1, 'N1O2P3Q4R8'),\r\n('User67', 2, 'S1T2U3V4W8'),\r\n('User68', 3, 'X1Y2Z3A4B8'),\r\n('User69', 4, 'C1D2E3F4G8'),\r\n('User70', 0, 'H1I2J3K4L8'),\r\n('User71', 1, 'M1N2O3P4Q8'),\r\n('User72', 2, 'R1S2T3U4V8'),\r\n('User73', 3, 'W1X2Y3Z4A8'),\r\n('User74', 4, 'B1C2D3E4F8'),\r\n('User75', 0, 'G1H2I3J4K8'),\r\n('User76', 1, 'L1M2N3O4P8'),\r\n('User77', 2, 'Q1R2S3T4U8'),\r\n('User78', 3, 'V1W2X3Y4Z8'),\r\n('User79', 4, 'A1B2C3D4E9'),\r\n('User80', 0, 'F1G2H3I4J9'),\r\n('User81', 1, 'K1L2M3N4O9'),\r\n('User82', 2, 'P1Q2R3S4T9'),\r\n('User83', 3, 'U1V2W3X4Y9'),\r\n('User84', 4, 'Z1A2B3C4D9'),\r\n('User85', 0, 'E1F2G3H4I9'),\r\n('User86', 1, 'J1K2L3M4N9'),\r\n('User87', 2, 'O1P2Q3R4S9'),\r\n('User88', 3, 'T1U2V3W4X9'),\r\n('User89', 4, 'Y1Z2A3B4C9'),\r\n('User90', 0, 'D1E2F3G4H9'),\r\n('User91', 1, 'I1J2K3L4M9'),\r\n('User92', 2, 'N1O2P3Q4R9'),\r\n('User93', 3, 'S1T2U3V4W9'),\r\n('User94', 4, 'X1Y2Z3A4B9'),\r\n('User95', 0, 'C1D2E3F4G9'),\r\n('User96', 1, 'H1I2J3K4L9'),\r\n('User97', 2, 'M1N2O3P4Q9'),\r\n('User98', 3, 'R1S2T3U4V9'),\r\n('User99', 4, 'W1X2Y3Z4A9'),\r\n('User100', 0, 'B1C2D3E4F9');\r\n");
        }

        [TestMethod()]
        public void PopulateReclamadosDatabase()
        {
            DatabaseOperations.QuerySqlCommandNoReturn("USE ProArc;\r\n\r\n-- Preencher a tabela Reclamados com 100 entradas\r\nINSERT INTO Reclamados (nome, cpf, cnpj, numero_rua, email, rua, bairro, cidade, uf)\r\nVALUES\r\n-- Exemplo de dados fictícios\r\n('João Silva', '12345678901', NULL, 123, 'joao.silva@example.com', 'Rua das Flores', 'Centro', 'São Paulo', 'SP'),\r\n('Maria Oliveira', '98765432100', NULL, 45, 'maria.oliveira@example.com', 'Avenida Brasil', 'Jardim América', 'Rio de Janeiro', 'RJ'),\r\n('Carlos Pereira', NULL, '11222333000181', 876, 'carlos.pereira@example.com', 'Rua da Paz', 'Vila Nova', 'Belo Horizonte', 'MG'),\r\n('Ana Costa', '33322211144', NULL, 12, 'ana.costa@example.com', 'Praça Central', 'Centro', 'Curitiba', 'PR'),\r\n('Fernanda Souza', NULL, '55667788000199', 678, 'fernanda.souza@example.com', 'Travessa Alegre', 'Industrial', 'Porto Alegre', 'RS'),\r\n('Lucas Almeida', '11122233344', NULL, 90, 'lucas.almeida@example.com', 'Rua das Palmeiras', 'Centro', 'Salvador', 'BA'),\r\n('Patrícia Lima', '99988877766', NULL, 50, 'patricia.lima@example.com', 'Avenida das Nações', 'Zona Sul', 'Fortaleza', 'CE'),\r\n('Roberto Fonseca', NULL, '33445566000111', 32, 'roberto.fonseca@example.com', 'Rua Nova', 'Centro', 'Manaus', 'AM'),\r\n('Débora Marques', '12332112332', NULL, 75, 'debora.marques@example.com', 'Rua Alegre', 'Cidade Alta', 'Recife', 'PE'),\r\n('Tiago Santos', NULL, '77889900000122', 44, 'tiago.santos@example.com', 'Avenida Principal', 'Centro', 'Florianópolis', 'SC'),\r\n('Paula Mendes', '56789012345', NULL, 112, 'paula.mendes@example.com', 'Rua Bela Vista', 'Centro', 'Goiânia', 'GO'),\r\n('Rafael Martins', '12365478900', NULL, 98, 'rafael.martins@example.com', 'Rua das Acácias', 'Jardim Europa', 'São Luís', 'MA'),\r\n('Carla Ribeiro', NULL, '99887766000188', 234, 'carla.ribeiro@example.com', 'Rua da Esperança', 'Cidade Nova', 'Campo Grande', 'MS'),\r\n('Eduardo Gomes', '32165498777', NULL, 56, 'eduardo.gomes@example.com', 'Rua Verde', 'Centro', 'Belém', 'PA'),\r\n('Juliana Torres', NULL, '55668877000144', 128, 'juliana.torres@example.com', 'Rua Azul', 'Industrial', 'Aracaju', 'SE'),\r\n('Renato Souza', '88877766655', NULL, 78, 'renato.souza@example.com', 'Rua Vermelha', 'Jardim Vitória', 'Vitória', 'ES'),\r\n('Luciana Rocha', '22211133399', NULL, 45, 'luciana.rocha@example.com', 'Rua do Sol', 'Centro', 'João Pessoa', 'PB'),\r\n('Marcelo Teixeira', NULL, '11122233000155', 109, 'marcelo.teixeira@example.com', 'Avenida Rio Branco', 'Centro', 'Natal', 'RN'),\r\n('Simone Ferreira', '98712345600', NULL, 88, 'simone.ferreira@example.com', 'Rua das Pedras', 'Zona Norte', 'Teresina', 'PI'),\r\n('Alessandra Lima', '65478932111', NULL, 92, 'alessandra.lima@example.com', 'Rua do Verde', 'Zona Sul', 'Maceió', 'AL'),\r\n('Diego Nascimento', NULL, '77665544000133', 67, 'diego.nascimento@example.com', 'Rua do Azul', 'Centro', 'Palmas', 'TO'),\r\n('Mariana Castro', '12398765422', NULL, 74, 'mariana.castro@example.com', 'Avenida das Flores', 'Centro', 'Boa Vista', 'RR'),\r\n('Felipe Araújo', '45632178900', NULL, 34, 'felipe.araujo@example.com', 'Rua Nova', 'Bairro Novo', 'Macapá', 'AP'),\r\n('Camila Moreira', '99966633322', NULL, 54, 'camila.moreira@example.com', 'Rua Alegre', 'Jardim Alegre', 'Rio Branco', 'AC'),\r\n('Hugo Santana', '33399955588', NULL, 100, 'hugo.santana@example.com', 'Avenida Central', 'Centro', 'Brasília', 'DF'),\r\n('Vitor Ramos', '44455566677', NULL, 120, 'vitor.ramos@example.com', 'Rua Primavera', 'Centro', 'Campinas', 'SP'),\r\n('Letícia Alves', NULL, '11233455000166', 130, 'leticia.alves@example.com', 'Rua do Prado', 'Zona Oeste', 'Sorocaba', 'SP'),\r\n('Fábio Barros', '11133322200', NULL, 47, 'fabio.barros@example.com', 'Rua Nova Esperança', 'Industrial', 'Joinville', 'SC'),\r\n('Thaís Farias', '22244455533', NULL, 65, 'thais.farias@example.com', 'Rua São João', 'Zona Norte', 'Cuiabá', 'MT'),\r\n('Bruno Vieira', NULL, '99887766000177', 89, 'bruno.vieira@example.com', 'Avenida Atlântica', 'Zona Sul', 'Balneário Camboriú', 'SC'),\r\n('Larissa Dias', '77766655544', NULL, 71, 'larissa.dias@example.com', 'Rua das Orquídeas', 'Centro', 'Maringá', 'PR'),\r\n('Rogério Santos', NULL, '55668877000122', 54, 'rogerio.santos@example.com', 'Rua das Palmeiras', 'Centro', 'Uberlândia', 'MG'),\r\n('Monique Monteiro', '65498732122', NULL, 37, 'monique.monteiro@example.com', 'Rua Bela Vista', 'Zona Leste', 'Taubaté', 'SP'),\r\n('Fernando Pinto', '32112345678', NULL, 44, 'fernando.pinto@example.com', 'Rua Central', 'Bairro Novo', 'Volta Redonda', 'RJ'),\r\n('Bianca Duarte', NULL, '77665588000144', 66, 'bianca.duarte@example.com', 'Avenida das Nações', 'Centro', 'Santos', 'SP'),\r\n('André Rezende', '22233344455', NULL, 89, 'andre.rezende@example.com', 'Rua Principal', 'Zona Norte', 'Araraquara', 'SP'),\r\n('Jéssica Azevedo', '98765432110', NULL, 123, 'jessica.azevedo@example.com', 'Rua Alegre', 'Centro', 'Petrolina', 'PE'),\r\n('Pedro Cruz', NULL, '88776655000188', 78, 'pedro.cruz@example.com', 'Rua Bela', 'Centro', 'Cabo Frio', 'RJ'),\r\n('Marcela Assis', '55544433322', NULL, 90, 'marcela.assis@example.com', 'Avenida Principal', 'Centro', 'São Carlos', 'SP'),\r\n('Cláudio Carvalho', '66655544411', NULL, 112, 'claudio.carvalho@example.com', 'Rua do Comércio', 'Industrial', 'Sete Lagoas', 'MG'),\r\n('Marina Lopes', NULL, '44556677000122', 50, 'marina.lopes@example.com', 'Rua Nova', 'Centro', 'Franca', 'SP'),\r\n('Lucas Freitas', '99988877766', NULL, 77, 'lucas.freitas@example.com', 'Avenida Verde', 'Jardim Tropical', 'Ribeirão Preto', 'SP');");
        }

        [TestMethod()]
        public void PopulateReclamantesDatabase()
        {
            DatabaseOperations.QuerySqlCommandNoReturn("USE ProArc;\r\n\r\n-- Preencher a tabela Reclamantes com 100 entradas\r\nINSERT INTO Reclamantes (nome, rg, cpf)\r\nVALUES\r\n-- Exemplo de dados fictícios\r\n('João Silva', 'MG1234567', '12345678901'),\r\n('Maria Oliveira', 'SP9876543', '98765432100'),\r\n('Carlos Pereira', 'RJ1122334', NULL),\r\n('Ana Costa', 'PR5566778', '33322211144'),\r\n('Fernanda Souza', 'RS9988776', NULL),\r\n('Lucas Almeida', 'BA4455667', '11122233344'),\r\n('Patrícia Lima', 'CE6677889', '99988877766'),\r\n('Roberto Fonseca', 'AM3344556', NULL),\r\n('Débora Marques', 'PE2233445', '12332112332'),\r\n('Tiago Santos', 'SC7788990', NULL),\r\n('Paula Mendes', 'GO5544332', '56789012345'),\r\n('Rafael Martins', 'MA6655443', '12365478900'),\r\n('Carla Ribeiro', 'MS1122110', NULL),\r\n('Eduardo Gomes', 'PA9900112', '32165498777'),\r\n('Juliana Torres', 'SE8811223', NULL),\r\n('Renato Souza', 'ES7711445', '88877766655'),\r\n('Luciana Rocha', 'PB6611556', '22211133399'),\r\n('Marcelo Teixeira', 'RN5511667', NULL),\r\n('Simone Ferreira', 'PI8811778', '98712345600'),\r\n('Alessandra Lima', 'AL7711889', '65478932111'),\r\n('Diego Nascimento', 'TO6611990', NULL),\r\n('Mariana Castro', 'RR5511100', '12398765422'),\r\n('Felipe Araújo', 'AP4411221', '45632178900'),\r\n('Camila Moreira', 'AC3311443', '99966633322'),\r\n('Hugo Santana', 'DF2211554', '33399955588'),\r\n('Vitor Ramos', 'SP1111665', '44455566677'),\r\n('Letícia Alves', 'SP0011776', NULL),\r\n('Fábio Barros', 'SC9911887', '11133322200'),\r\n('Thaís Farias', 'MT8811998', '22244455533'),\r\n('Bruno Vieira', 'SC7711009', NULL),\r\n('Larissa Dias', 'PR6611220', '77766655544'),\r\n('Rogério Santos', 'MG5511331', NULL),\r\n('Monique Monteiro', 'SP4411442', '65498732122'),\r\n('Fernando Pinto', 'RJ3311553', '32112345678'),\r\n('Bianca Duarte', 'SP2211664', NULL),\r\n('André Rezende', 'SP1111775', '22233344455'),\r\n('Jéssica Azevedo', 'PE0011886', '98765432110'),\r\n('Pedro Cruz', 'RJ9911997', NULL),\r\n('Marcela Assis', 'SP8811008', '55544433322'),\r\n('Cláudio Carvalho', 'MG7711119', '66655544411'),\r\n('Marina Lopes', 'SP6611221', NULL),\r\n('Lucas Freitas', 'SP5511332', '99988877766'),\r\n('Beatriz Souza', 'BA8811443', '12312312312'),\r\n('Victor Moreira', 'CE7711554', '98798798798'),\r\n('Flávia Alves', 'PE6611665', NULL),\r\n('Rafael Gonçalves', 'SC5511776', '55555555555'),\r\n('Camila Rocha', 'RS4411887', '66666666666'),\r\n('Eduardo Lima', 'RJ3311998', NULL),\r\n('Carolina Mendes', 'SP2211109', '77777777777'),\r\n('Fábio Nascimento', 'SP1111110', '88888888888'),\r\n('Larissa Ramos', 'SC9911221', '99999999999'),\r\n('Juliana Farias', 'PR7711332', NULL),\r\n('Anderson Silva', 'MG6611443', '12345123451'),\r\n('Roberta Souza', 'SP5511554', '54321543215'),\r\n('Renato Pereira', 'RJ4411665', NULL),\r\n('Alessandra Costa', 'SP3311776', '11112222333'),\r\n('Felipe Martins', 'SP2211887', '22223333444'),\r\n('Bianca Lopes', 'SP1111998', '33334444555'),\r\n('Thiago Teixeira', 'SP9911109', '44445555666'),\r\n('Carla Lima', 'SP7711110', NULL),\r\n('Jorge Ribeiro', 'SP6611221', '55556666777'),\r\n('Paulo Gonçalves', 'SP5511332', '66667777888'),\r\n('Daniel Monteiro', 'SP4411443', NULL),\r\n('Cássia Almeida', 'SP3311554', '77778888999'),\r\n('Cláudia Ramos', 'SP2211665', '88889999000'),\r\n('Carlos Fonseca', 'SP1111776', NULL),\r\n('Tatiana Barros', 'SP9911887', '99990000111'),\r\n('Marcelo Oliveira', 'SP7711998', '11112222334'),\r\n('Patrícia Carvalho', 'SP6611109', NULL),\r\n('José Santos', 'SP5511110', '22223333445'),\r\n('Ana Paula', 'SP4411221', '33334444556'),\r\n('Rodrigo Freitas', 'SP3311332', NULL),\r\n('Gabriela Mendes', 'SP2211443', '44445555667'),\r\n('Antônio Nunes', 'SP1111554', '55556666778'),\r\n('Isabela Cruz', 'SP9911665', NULL),\r\n('Caio Tavares', 'SP7711776', '66667777889'),\r\n('Fernanda Rezende', 'SP6611887', '77778888990'),\r\n('Vinícius Martins', 'SP5511998', NULL),\r\n('Laura Almeida', 'SP4411109', '88889999011'),\r\n('Rafael Souza', 'SP3311110', '99990000122'),\r\n('Júlia Ribeiro', 'SP2211221', NULL),\r\n('Mateus Gonçalves', 'SP1111332', '11112222335'),\r\n('Marta Lopes', 'SP9911443', '22223333446'),\r\n('Fernando Almeida', 'SP7711554', NULL),\r\n('Aline Ramos', 'SP6611665', '33334444557'),\r\n('Leonardo Rocha', 'SP5511776', '44445555668');\r\n");
        }

        [TestMethod()]
        public void PopulateMotivosDatabase()
        {
            DatabaseOperations.QuerySqlCommandNoReturn("USE ProArc;\r\n\r\n-- Preencher a tabela Motivos com 100 entradas reais do PROCON\r\nINSERT INTO Motivos (nome, descricao, data_criacao)\r\nVALUES\r\n('Cobrança Indevida', 'Cobrança por serviços não contratados ou valores diferentes do acordado.', GETDATE()),\r\n('Propaganda Enganosa', 'Anúncio que induz o consumidor ao erro sobre as características ou preço do produto.', GETDATE()),\r\n('Produto com Defeito', 'Produto apresenta vícios ou defeitos que comprometem seu uso.', GETDATE()),\r\n('Não Cumprimento de Oferta', 'Falta de entrega ou cumprimento de condições anunciadas.', GETDATE()),\r\n('Demora na Entrega', 'Entrega do produto ou serviço fora do prazo combinado.', GETDATE()),\r\n('Garantia Recusada', 'Negativa de atendimento dentro do período de garantia.', GETDATE()),\r\n('Cobrança Duplicada', 'Repetição de cobranças para o mesmo serviço ou produto.', GETDATE()),\r\n('Cláusulas Abusivas', 'Condições impostas no contrato que ferem os direitos do consumidor.', GETDATE()),\r\n('Serviço Mal Prestado', 'Execução de serviços com qualidade abaixo do esperado.', GETDATE()),\r\n('Aumento Abusivo de Preço', 'Reajuste de preços sem justificativa ou acima do permitido.', GETDATE()),\r\n('Venda Casada', 'Obrigatoriedade de adquirir um produto para acessar outro.', GETDATE()),\r\n('Produto Avariado', 'Produto entregue com danos físicos ou falta de componentes.', GETDATE()),\r\n('Dificuldade de Cancelamento', 'Impedimentos ou obstáculos no processo de cancelar serviços ou contratos.', GETDATE()),\r\n('Falta de Reembolso', 'Não devolução de valores pagos após cancelamento.', GETDATE()),\r\n('Fraude em Compras', 'Uso indevido de dados para realização de compras não autorizadas.', GETDATE()),\r\n('Produto Divergente', 'Produto recebido é diferente daquele anunciado.', GETDATE()),\r\n('Serviço Cancelado Sem Aviso', 'Prestadora encerra o serviço sem comunicação prévia.', GETDATE()),\r\n('Falta de Suporte Técnico', 'Ausência de atendimento ou suporte após contratação.', GETDATE()),\r\n('Renovação Automática Indevida', 'Renovação sem autorização prévia.', GETDATE()),\r\n('Produto Falsificado', 'Produto adquirido não é original ou licenciado.', GETDATE()),\r\n('Danos Morais', 'Situação que causa prejuízos psicológicos ou à reputação.', GETDATE()),\r\n('Negativa de Devolução', 'Impedimento ou recusa em aceitar devolução dentro do prazo.', GETDATE()),\r\n('Cobrança de Taxas Indevidas', 'Cobrança de valores não previstos em contrato.', GETDATE()),\r\n('Venda de Produtos Proibidos', 'Comercialização de itens fora das normas ou regulações.', GETDATE()),\r\n('Falta de Nota Fiscal', 'Negativa ou ausência de entrega de comprovante de compra.', GETDATE()),\r\n('Serviço Não Contratado', 'Prestadora fornece serviços que não foram solicitados.', GETDATE()),\r\n('Bloqueio Indevido de Conta', 'Conta ou serviço suspenso sem justificativa.', GETDATE()),\r\n('Descumprimento de Acordo', 'Falta de cumprimento de termos acordados entre as partes.', GETDATE()),\r\n('Preços Divergentes', 'Valor cobrado é diferente do anunciado ou exibido.', GETDATE()),\r\n('Produto Vencido', 'Venda de produtos fora do prazo de validade.', GETDATE()),\r\n('Problemas em Assinaturas', 'Dificuldades em alterar ou cancelar planos e assinaturas.', GETDATE()),\r\n('Negativa de Troca', 'Recusa em realizar substituição de produto com defeito.', GETDATE()),\r\n('Problemas em Compras Online', 'Entrega incompleta ou dificuldades com e-commerce.', GETDATE()),\r\n('Serviço Interrompido', 'Suspensão de serviços contratados sem aviso prévio.', GETDATE()),\r\n('Retenção de Documentos', 'Empresa se recusa a devolver documentos do consumidor.', GETDATE()),\r\n('Falta de Informações', 'Ausência de orientações claras no atendimento.', GETDATE()),\r\n('Problemas em Cartões de Crédito', 'Cobranças errôneas ou dificuldade de cancelamento.', GETDATE()),\r\n('Práticas Abusivas', 'Empresa adota medidas que colocam o consumidor em desvantagem.', GETDATE()),\r\n('Corte de Serviço Essencial', 'Interrupção de luz, água ou internet sem justificativa.', GETDATE()),\r\n('Problemas de Qualidade', 'Produtos ou serviços entregues com qualidade inferior.', GETDATE()),\r\n('Falta de Manual ou Instruções', 'Produto sem orientação de uso ou montagem.', GETDATE()),\r\n('Garantia Adicional Negada', 'Extensão de garantia recusada.', GETDATE()),\r\n('Erro em Contratos', 'Informações erradas ou incompletas nos documentos.', GETDATE()),\r\n('Serviço Parcialmente Prestado', 'Serviço entregue não cobre o contratado.', GETDATE()),\r\n('Venda de Produto Irregular', 'Produto não segue normas ou padrões regulatórios.', GETDATE()),\r\n('Cadastro Indevido', 'Inclusão do consumidor em registros sem consentimento.', GETDATE()),\r\n('Falha em Reparo', 'Problemas persistem após tentativa de conserto.', GETDATE()),\r\n('Negativa de Atualização', 'Recusa de ajustes ou upgrades contratados.', GETDATE()),\r\n('Fraude em Contratos', 'Informações ou cláusulas inseridas sem autorização.', GETDATE()),\r\n('Cancelamento Sem Reembolso', 'Valor pago não é devolvido após encerramento.', GETDATE()),\r\n('Falta de Acessibilidade', 'Dificuldades para pessoas com deficiências.', GETDATE()),\r\n('Cobrança por Serviços Inexistentes', 'Valores referentes a itens nunca fornecidos.', GETDATE());");
        }
    }
}